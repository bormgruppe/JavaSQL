apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'

buildscript {
    repositories {
        mavenCentral()
    }
}

repositories {
    mavenCentral()
    maven {
        url "http://repo.maven.apache.org/maven2"
    }
}

configurations {
    antlr4
}

dependencies {
    compile group: 'net.sourceforge.jtds', name: 'jtds', version: '1.3.1'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.7'

    compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.5'
    antlr4 group: 'org.antlr', name: 'antlr4', version: '4.5'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.12'

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task antlrGenerate {
    description = 'Generates Java sources from ANTLR4 grammars'

    doLast {
        def srcFolder = 'src/main/java'
        def grammars = fileTree(srcFolder).include('**/*.g4')

        grammars.each { file ->
            def path = file.canonicalPath.replace(System.properties['file.separator'], '/') - ('/' + file.name)
            def pkg = path.substring(path.indexOf(srcFolder) + srcFolder.length() + 1).replace('/', '.')

            new ByteArrayOutputStream().withStream { stream ->
                project.javaexec {
                    main = 'org.antlr.v4.Tool'
                    classpath = configurations.antlr4
                    args = ['-o', '"' + path + '"', '-package', '"' + pkg + '"', '-listener', '-visitor', '"' + file.canonicalPath + '"'].flatten()
                    standardOutput = stream
                }
            }
        }
    }
}

compileJava {
    dependsOn antlrGenerate
}

jar {
    exclude('ch/sama/sql/dbo/generator/SchemaGenerator.*')
    exclude('ch/sama/sql/generated/**')

    /*
    // Copies the dependencies into the jar
    from configurations.compile.collect {
        it.isDirectory() ? it : zipTree(it)
    }
    */
}

clean {
    delete "$projectDir/src/main/java/ch/sama/sql/generated"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

// running a single test:
//  gradle -Dtest.single=CLASSNAME test
test {
    testLogging {
        events 'failed'
    }

    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }

    outputs.upToDateWhen { false }
}

jar {
    version '1.3.2'
}
